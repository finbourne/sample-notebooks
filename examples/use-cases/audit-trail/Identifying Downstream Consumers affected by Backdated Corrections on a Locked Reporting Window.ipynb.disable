{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "\"\"\"Identifying backdated corrections\n",
    "\n",
    "Demonstration of how to identify backdated corrections and their impact\n",
    "\n",
    "Attributes\n",
    "----------\n",
    "cocoon - seed_data\n",
    "portfolio changes\n",
    "insights\n",
    "build transaction\n",
    "\"\"\""
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identifying Downstream Consumers affected by Backdated Corrections on a Locked Reporting Window"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LUSID is a [bi-temporal system](https://support.finbourne.com/what-is-bi-temporal-data). This means that any event recorded by LUSID e.g. [Upserting Transactions](https://www.lusid.com/docs/api/#operation/UpsertTransactions) or [Setting Holdings](https://www.lusid.com/docs/api/#operation/SetHoldings) has two dates. An [asAt date](https://support.finbourne.com/what-is-asat-time) and an [effectiveAt date](https://support.finbourne.com/what-is-effectiveat-effectivefrom-time).\n",
    "\n",
    "To lock off a period for reporting purposes you may produce a bi-temporal cut-off. That is a cut-off datetime in both the effectiveAt and asAt space.\n",
    "\n",
    "For example you may want to send out a report for the month of January and so you set a cut-off of the 31st of January at 11:59:59pm. This means that any backdated data entered into LUSID after the 31st of January at 11:59:59pm will not be included in the report. Furthermore any data relating to future activity for example pending settlements which occurs after the 31st of January at 11:59:59pm but was entered into the system before the 31st of January at 11:59:59pm will also not be included in the report. *Note in this example the effectiveAt and asAt datetimes are the same. This does not necessarily need to be the case.*\n",
    "\n",
    "This works great and with LUSID being bi-temporal you can produce such a report without any issues. \n",
    "\n",
    "However, what happens if you then discover that a serious error has been made in your report and a large number of transactions are missing? Do you stick with the locked off period? Or do you include the missing transactions to ensure your report is accurate? If you do include the missing transactions:\n",
    "\n",
    "- How do you know which Portfolios will be affected?\n",
    "- How do you know which downstream consumers this will affect? \n",
    "- How will your downstream consumers know what changes you have made so they can also decide whether or not to re-run their reports?\n",
    "\n",
    "This notebook steps you through how you can answer all of these questions using LUSID via the following steps:\n",
    "\n",
    "**1)** Load some transactions to a set of Portfolios and then set a cut-off date for a report which is due to go out. Then after the cut-off date add some additional transactions to the Portfolios some of which occurred before the cut-off date (backdated transactions) and some after (amendment transactions).\n",
    "\n",
    "**2)** Identify which Portfolios have experienced a backdated transaction which may invalidate the report. \n",
    "\n",
    "**3)** Identify which Users consumed data from these Portfolios before the cut-off date and therefore need to be notified that the report may be invalidated.\n",
    "\n",
    "**4)** For a given affected User and affected Portfolio retrieve the details of all corrections so they can decide on what action to take. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0) Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LUSID Environment Initialised\n",
      "LUSID API Version:  0.5.4408.0\n"
     ]
    }
   ],
   "source": [
    "# Import LUSID\n",
    "import lusid\n",
    "from lusidjam import RefreshingToken\n",
    "\n",
    "# Import Libraries\n",
    "import os\n",
    "import json\n",
    "import time as sleep_time\n",
    "import requests\n",
    "import pandas as pd\n",
    "from datetime import datetime, timedelta, time\n",
    "\n",
    "import pytz\n",
    "import dateutil.parser\n",
    "import matplotlib.pyplot as plt\n",
    "from lusidtools.cocoon.seed_sample_data import seed_data\n",
    "from lusidtools.cocoon.utilities import create_scope_id\n",
    "from lusidtools.pandas_utils.lusid_pandas import lusid_response_to_data_frame\n",
    "\n",
    "# Authenticate our user and create our API client\n",
    "api_factory = lusid.utilities.ApiClientFactory(\n",
    "    token=RefreshingToken(),\n",
    "    app_name=\"LusidJupyterNotebook\")\n",
    "\n",
    "print ('LUSID Environment Initialised')\n",
    "print ('LUSID API Version: ', api_factory.build(lusid.api.ApplicationMetadataApi).get_lusid_versions().build_version)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1) Load Transactions, Set Cut-Off Date and then Load More Transactions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unlike the effectiveAt datetime you have no control over the asAt datetime as this is the system time recorded when you interact with LUSID. Therefore, to simulate your example you will load some transactions, set the cut-off to be just after the the transactions have been loaded and then load some additional transactions after the cut-off some of which occurred before the cut-off date (backdated transactions) and some after (amendment transactions).\n",
    "\n",
    "*Run the cell below to simulate your cut-off and load transactions*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading transactions into scope: AuditTrail-3877-f893-882e-bc\n",
      "Loaded batch initial_transactions_effective_at_date...napping for 5 seconds\n",
      "Loaded batch additional_transactions_backdated_1...napping for 5 seconds\n",
      "Loaded batch additional_transactions_backdated_2...napping for 5 seconds\n",
      "Loaded batch additional_transactions_backdated_3...napping for 5 seconds\n",
      "Loaded batch additional_transactions_ammended...napping for 5 seconds\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>effective_at_date</th>\n",
       "      <th>file</th>\n",
       "      <th>as_at_date</th>\n",
       "      <th>affected_portfolios</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>initial_transactions_effective_at_date</td>\n",
       "      <td>2020-05-12 10:07:00.657383+00:00</td>\n",
       "      <td>data/global_equity_transactions.csv</td>\n",
       "      <td>2020-05-14 10:07:02.432149+00:00</td>\n",
       "      <td>[EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY, EQUITY_G...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>cut_off</td>\n",
       "      <td>2020-05-14 10:07:03.432149+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-05-14 10:07:03.432149+00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>additional_transactions_backdated_1</td>\n",
       "      <td>2020-05-12 10:07:00.657383+00:00</td>\n",
       "      <td>data/global_equity_transactions_additional.csv</td>\n",
       "      <td>2020-05-14 10:07:08.466911+00:00</td>\n",
       "      <td>[EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>additional_transactions_backdated_2</td>\n",
       "      <td>2020-05-13 10:07:00.657383+00:00</td>\n",
       "      <td>data/global_equity_transactions_additional2.csv</td>\n",
       "      <td>2020-05-14 10:07:14.561554+00:00</td>\n",
       "      <td>[EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>additional_transactions_backdated_3</td>\n",
       "      <td>2020-05-13 02:07:00.657383+00:00</td>\n",
       "      <td>data/global_equity_transactions_additional4.csv</td>\n",
       "      <td>2020-05-14 10:07:20.628884+00:00</td>\n",
       "      <td>[EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>additional_transactions_ammended</td>\n",
       "      <td>2020-05-15 10:07:00.657383+00:00</td>\n",
       "      <td>data/global_equity_transactions_additional3.csv</td>\n",
       "      <td>2020-05-14 10:07:26.726034+00:00</td>\n",
       "      <td>[EQUITY_GLOBAL, EQUITY_GLOBAL_TECH]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     name                 effective_at_date  \\\n",
       "0  initial_transactions_effective_at_date  2020-05-12 10:07:00.657383+00:00   \n",
       "5                                 cut_off  2020-05-14 10:07:03.432149+00:00   \n",
       "1     additional_transactions_backdated_1  2020-05-12 10:07:00.657383+00:00   \n",
       "2     additional_transactions_backdated_2  2020-05-13 10:07:00.657383+00:00   \n",
       "3     additional_transactions_backdated_3  2020-05-13 02:07:00.657383+00:00   \n",
       "4        additional_transactions_ammended  2020-05-15 10:07:00.657383+00:00   \n",
       "\n",
       "                                              file  \\\n",
       "0              data/global_equity_transactions.csv   \n",
       "5                                              NaN   \n",
       "1   data/global_equity_transactions_additional.csv   \n",
       "2  data/global_equity_transactions_additional2.csv   \n",
       "3  data/global_equity_transactions_additional4.csv   \n",
       "4  data/global_equity_transactions_additional3.csv   \n",
       "\n",
       "                        as_at_date  \\\n",
       "0 2020-05-14 10:07:02.432149+00:00   \n",
       "5 2020-05-14 10:07:03.432149+00:00   \n",
       "1 2020-05-14 10:07:08.466911+00:00   \n",
       "2 2020-05-14 10:07:14.561554+00:00   \n",
       "3 2020-05-14 10:07:20.628884+00:00   \n",
       "4 2020-05-14 10:07:26.726034+00:00   \n",
       "\n",
       "                                 affected_portfolios  \n",
       "0  [EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY, EQUITY_G...  \n",
       "5                                                NaN  \n",
       "1              [EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]  \n",
       "2              [EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]  \n",
       "3              [EQUITY_GLOBAL, EQUITY_GLOBAL_ENERGY]  \n",
       "4                [EQUITY_GLOBAL, EQUITY_GLOBAL_TECH]  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scope = \"AuditTrail-\" + create_scope_id()\n",
    "print (f\"Loading transactions into scope: {scope}\")\n",
    "\n",
    "# Load a mapping file for loading data\n",
    "with open(r\"data/seed_data.json\") as mappings_file:\n",
    "    seed_data_mapping = json.load(mappings_file)\n",
    "\n",
    "# Set the effectiveAt time seed for the initial batch of transactions, must be before the current datetime\n",
    "current_datetime = datetime.now(pytz.UTC)\n",
    "initial_transactions_effective_at_date = current_datetime - timedelta(days=2)\n",
    "\n",
    "# The details for all batches of transactions\n",
    "transactions = [\n",
    "    {\n",
    "        \"name\": \"initial_transactions_effective_at_date\",\n",
    "        \"effective_at_date\": initial_transactions_effective_at_date,\n",
    "        \"file\": \"data/global_equity_transactions.csv\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"additional_transactions_backdated_1\",\n",
    "        \"effective_at_date\": initial_transactions_effective_at_date,\n",
    "        \"file\": \"data/global_equity_transactions_additional.csv\"\n",
    "    },    \n",
    "    {\n",
    "        \"name\": \"additional_transactions_backdated_2\",\n",
    "        \"effective_at_date\": initial_transactions_effective_at_date + (\n",
    "            current_datetime - initial_transactions_effective_at_date) / 2,\n",
    "        \"file\": \"data/global_equity_transactions_additional2.csv\"\n",
    "    },    \n",
    "    {\n",
    "        \"name\": \"additional_transactions_backdated_3\",\n",
    "        \"effective_at_date\": initial_transactions_effective_at_date + (\n",
    "            current_datetime - initial_transactions_effective_at_date) / 3,\n",
    "        \"file\": \"data/global_equity_transactions_additional4.csv\"\n",
    "    },  \n",
    "    {\n",
    "        \"name\": \"additional_transactions_ammended\",\n",
    "        \"effective_at_date\": initial_transactions_effective_at_date + (\n",
    "            current_datetime - initial_transactions_effective_at_date) * 1.5,\n",
    "        \"file\": \"data/global_equity_transactions_additional3.csv\"\n",
    "    },\n",
    "]\n",
    "\n",
    "# Load each batch in, waiting 5 seconds between each\n",
    "for transaction_set in transactions:\n",
    "    \n",
    "    # Read and load transaction file overriding the effectiveAt dates\n",
    "    transactions_df = pd.read_csv(transaction_set[\"file\"])\n",
    "    transactions_df[\"txn_trade_date\"] = transaction_set[\"effective_at_date\"]\n",
    "    transactions_df[\"txn_settle_date\"] = transaction_set[\"effective_at_date\"] + timedelta(days=2)\n",
    "\n",
    "    seed_data_response = seed_data(\n",
    "        api_factory,\n",
    "        [\"portfolios\", \"instruments\", \"transactions\"],\n",
    "        scope,\n",
    "        transactions_df,\n",
    "        \"DataFrame\",\n",
    "        mappings=seed_data_mapping,\n",
    "    )\n",
    "    \n",
    "    # Update the batch with the asAt (system time) that the data went in\n",
    "    transaction_set[\"as_at_date\"] =  seed_data_response[\"transactions\"][0][\"transactions\"][\"success\"][0].version.as_at_date\n",
    "    transaction_set[\"affected_portfolios\"] = list(transactions_df[\"portfolio_code\"].unique())\n",
    "    print (f\"Loaded batch {transaction_set['name']}...napping for 5 seconds\")\n",
    "    sleep_time.sleep(5)\n",
    "\n",
    "# Configure the cut_off_date to be a second after the asAt time of the initial transactions, which is also\n",
    "# greater than the effectiveAt time of the initial transactions\n",
    "cut_off_date = transactions[0][\"as_at_date\"]+timedelta(seconds=1)\n",
    "cut_off = cut_off_date.strftime(\"%Y-%m-%dT%H:%M:%S\")+\"Z\"\n",
    "\n",
    "transactions.append(\n",
    "    {\n",
    "        \"name\": \"cut_off\",\n",
    "        \"effective_at_date\": cut_off_date,\n",
    "        \"as_at_date\": cut_off_date\n",
    "    }\n",
    ")\n",
    "\n",
    "pd.DataFrame(transactions).sort_values(\"as_at_date\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2) Identify which Portfolios have experienced a backdated transaction which may invalidate the report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand which events you are interested in when identifying the Portfolios which have had a backdated correction it is useful to visualise the asAt and effectiveAt dimensions on a 2 dimensional plane.\n",
    "\n",
    "Below you can see the asAt time represented by the Y-Axis and the effectiveAt time represented by the X-Axis. You can also see a generic bi-temporal cut-off.\n",
    "\n",
    "There are 4 quadrants relative to the cut-off.\n",
    "\n",
    "**q0 (red)** - This is in the past with respect to both effectiveAt and asAt time relative to the cut-off. These occurred before the cut-off in every respect and no events can have been posted here after the cut-off. \n",
    "\n",
    "**q1 & q2 (orange)** - These are in the future in effectiveAt time and may be in the past or future in asAt time relative to the cut-off. They represent changes to an entity e.g. Portfolio which have occurred after your cut-off in effectiveAt time. For example an addition of a position statement for the 2nd of February which may have been loaded on the 29th of January or the 1st of February and your cut-off is the 31st of January. This does not affect your report for January.  They are thus amendments and are not backdated corrections. \n",
    "\n",
    "**q3 (green)** - These are in the future in asAt time and in the past in effectiveAt time relative to the cut-off. They represent an event which has been entered into LUSID after your cut-off but affects the entity e.g. Portfolio for a date before the cut-off. For example the addition of a transaction for the 20th of January added to the system on the 3rd of February. They are backdated corrections. Any Portfolio with an event in q3 has seen a backdated correction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Bi-Temporal](img/Bi-TemporalQuadrants.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can use the [Get Portfolio Changes](https://www.lusid.com/docs/api/#operation/GetPortfolioChanges) from the [LUSID Entities API](https://www.lusid.com/docs/api/#tag/Entities) to identify the Portfolios in a given scope which have an event in this q3 quadrant with respect to a cut-off and there contain a backdated correction.\n",
    "\n",
    "For each Portfolio in the scope LUSID will return the first (if any) amendment (q1 & q2) and correction (q3) made to the Portfolio in effectiveAt time.\n",
    "\n",
    "You can see an example of this for a Portfolio with the event profile shown below. The two circled events will be returned.\n",
    "\n",
    "You can see that although there is only a single event returned by this API there are actually numerous corrections and amendments which have occurred for this example Portfolio. It is therefore a great indicator of whether or not a Portfolio has been affected by a backdated correction, but not to get a comprehensive picture of how many corrections there were and what those corrections contained."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![GetPortfolioChanges](img/GetPortfolioChangesExample.png) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Run the cell below to get the changes for your scope* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 3 Portfolios with amendments and/or corrections\n",
      "There are 2 Portfolios wtih amendments\n",
      "There are 2 Portfolios with corrections \n",
      "\n",
      "Here are the Portfolios with a correction \n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>href</th>\n",
       "      <th>entity_id.scope</th>\n",
       "      <th>entity_id.code</th>\n",
       "      <th>corrected</th>\n",
       "      <th>correction_effective_at</th>\n",
       "      <th>correction_as_at</th>\n",
       "      <th>amended</th>\n",
       "      <th>amendment_effective_at</th>\n",
       "      <th>amendment_as_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://fbn-prd.lusid.com/api/api/entities/cha...</td>\n",
       "      <td>AuditTrail-3877-f893-882e-bc</td>\n",
       "      <td>EQUITY_GLOBAL</td>\n",
       "      <td>True</td>\n",
       "      <td>2020-05-12 10:07:00.657383+00:00</td>\n",
       "      <td>2020-05-14 10:07:08.466911+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>2020-05-15 10:07:00.657383+00:00</td>\n",
       "      <td>2020-05-14 10:07:26.726034+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://fbn-prd.lusid.com/api/api/entities/cha...</td>\n",
       "      <td>AuditTrail-3877-f893-882e-bc</td>\n",
       "      <td>EQUITY_GLOBAL_ENERGY</td>\n",
       "      <td>True</td>\n",
       "      <td>2020-05-12 10:07:00.657383+00:00</td>\n",
       "      <td>2020-05-14 10:07:08.499881+00:00</td>\n",
       "      <td>False</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                href  \\\n",
       "0  https://fbn-prd.lusid.com/api/api/entities/cha...   \n",
       "1  https://fbn-prd.lusid.com/api/api/entities/cha...   \n",
       "\n",
       "                entity_id.scope        entity_id.code  corrected  \\\n",
       "0  AuditTrail-3877-f893-882e-bc         EQUITY_GLOBAL       True   \n",
       "1  AuditTrail-3877-f893-882e-bc  EQUITY_GLOBAL_ENERGY       True   \n",
       "\n",
       "           correction_effective_at                 correction_as_at  amended  \\\n",
       "0 2020-05-12 10:07:00.657383+00:00 2020-05-14 10:07:08.466911+00:00     True   \n",
       "1 2020-05-12 10:07:00.657383+00:00 2020-05-14 10:07:08.499881+00:00    False   \n",
       "\n",
       "            amendment_effective_at                  amendment_as_at  \n",
       "0 2020-05-15 10:07:00.657383+00:00 2020-05-14 10:07:26.726034+00:00  \n",
       "1                              NaT                              NaT  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get Changes which Includes Deleted Portfolios\n",
    "changes = api_factory.build(lusid.api.EntitiesApi).get_portfolio_changes(\n",
    "    scope=scope,\n",
    "    effective_at=cut_off,\n",
    "    as_at=cut_off)\n",
    "\n",
    "# Get Active Portfolios\n",
    "active_portfolios = [portfolio.id.code for portfolio in api_factory.build(\n",
    "    lusid.api.PortfoliosApi).list_portfolios_for_scope(\n",
    "        scope=scope).values]\n",
    "\n",
    "# Filter out Deleted Portfolios\n",
    "changes = [change for change in changes.values if change.entity_id.code in active_portfolios]\n",
    "\n",
    "# Get the corrections and amendments\n",
    "corrections = [change for change in changes if change.correction_as_at is not None]\n",
    "amendments = [change for change in changes if change.amendment_as_at is not None]\n",
    "\n",
    "print (f\"There are {len(changes)} Portfolios with amendments and/or corrections\")\n",
    "print (f\"There are {len(amendments)} Portfolios wtih amendments\")\n",
    "print (f\"There are {len(corrections)} Portfolios with corrections\", \"\\n\")\n",
    "\n",
    "print (\"Here are the Portfolios with a correction\", \"\\n\")\n",
    "lusid_response_to_data_frame(corrections)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3) Find Affected Users"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that you know which Portfolios have a backdated correction you want to find all the users which are affected by the backdated corrections to the identified Portfolios. \n",
    "\n",
    "You consider a user to be affected if before the cut-off they read the latest data from a Portfolio.\n",
    "\n",
    "As far as they are concerned what they saw before the cut-off is what went into the report after the cut-off and they need to be notified of any backdated corrections that have happened since then. \n",
    "\n",
    "Going back to the 2D representation of bi-temporal time, you are looking for all activity in a subsection of the q0 quadrant as show below. Note this diagram also has a lower bound to both the effectiveAt and asAt datetimes to limit the number of users who will be notified. This is a practical constraint you may wish to implement across one or both dimensions, as it is unlikely a consumer of the data from 2011 would want to be notified of a change in 2020. Without these lower bounds they would still be notified."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![AccessLogs](img/Logs.png) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can do this by reviewing the access logs of your users using the [FINBOURNE Insights API](https://support.finbourne.com/how-do-i-use-the-insights-application).\n",
    "\n",
    "You can filter the logs to all Portfolio data read from the the q0 quadrant as shown above.\n",
    "\n",
    "If a user has a log showing that they accessed data in this q0 quadrant and there is a backdated correction for that Portfolio in the q3 quadrant, they need to be notified as their \"locked\" view of the world may have become invalidated.\n",
    "\n",
    "There is currently no Software Development Kit (SDK) for Insights, so you will call the API directly.\n",
    "\n",
    "If you aren't familiar with filtering across the FINBOURNE APIs take a look at the documentation for the [Filtering Syntax](https://support.finbourne.com/filtering-results-from-lusid) used below.\n",
    "\n",
    "*Run the cell below to get the access logs for the relevant window using filters*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retreived 50 access logs \n",
      "\n",
      "Here are some examples of the access logs \n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>application</th>\n",
       "      <th>id</th>\n",
       "      <th>requestId</th>\n",
       "      <th>sessionId</th>\n",
       "      <th>user</th>\n",
       "      <th>userType</th>\n",
       "      <th>duration</th>\n",
       "      <th>result</th>\n",
       "      <th>authoritativeRoleId</th>\n",
       "      <th>...</th>\n",
       "      <th>action</th>\n",
       "      <th>resource</th>\n",
       "      <th>resourceFromEffectiveDate</th>\n",
       "      <th>resourceToEffectiveDate</th>\n",
       "      <th>resourceFromAsAt</th>\n",
       "      <th>resourceToAsAt</th>\n",
       "      <th>accessExecutionTime</th>\n",
       "      <th>accessAsAtTime</th>\n",
       "      <th>requiredLicencePolicyId</th>\n",
       "      <th>links</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-05-14T10:07:00.908+00:00</td>\n",
       "      <td>lusid</td>\n",
       "      <td>metrics-api-entitlements-evaluation-active+5+7...</td>\n",
       "      <td>0HLVNE9E773SU:00000001</td>\n",
       "      <td>9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...</td>\n",
       "      <td>00u4edwdnnCS5aFsN2p7</td>\n",
       "      <td>Unspecified</td>\n",
       "      <td>2.9817</td>\n",
       "      <td>Success</td>\n",
       "      <td>LUSID_SYSTEM/lusid-administrator</td>\n",
       "      <td>...</td>\n",
       "      <td>Portfolio/default/Read</td>\n",
       "      <td>{'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...</td>\n",
       "      <td>2020-05-14T10:07:00.8963470+00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>AsAt=2020-05-14T10:04:48.0745930+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td>2020-05-14T10:07:00.8940668+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-05-14T10:07:00.945+00:00</td>\n",
       "      <td>lusid</td>\n",
       "      <td>metrics-api-entitlements-evaluation-active+5+7...</td>\n",
       "      <td>0HLVNE9IQKOVH:00000001</td>\n",
       "      <td>9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...</td>\n",
       "      <td>00u4edwdnnCS5aFsN2p7</td>\n",
       "      <td>Unspecified</td>\n",
       "      <td>6.1254</td>\n",
       "      <td>Success</td>\n",
       "      <td>LUSID_SYSTEM/lusid-administrator</td>\n",
       "      <td>...</td>\n",
       "      <td>Portfolio/default/Read</td>\n",
       "      <td>{'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...</td>\n",
       "      <td>2020-05-14T10:07:00.9310360+00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>AsAt=2020-05-14T10:04:48.0745930+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td>2020-05-14T10:07:00.9242489+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-05-14T10:07:00.993+00:00</td>\n",
       "      <td>lusid</td>\n",
       "      <td>metrics-api-entitlements-evaluation-active+4+7...</td>\n",
       "      <td>0HLVNE9E773SV:00000001</td>\n",
       "      <td>9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...</td>\n",
       "      <td>00u4edwdnnCS5aFsN2p7</td>\n",
       "      <td>Unspecified</td>\n",
       "      <td>2.7767</td>\n",
       "      <td>Success</td>\n",
       "      <td>LUSID_SYSTEM/lusid-administrator</td>\n",
       "      <td>...</td>\n",
       "      <td>Portfolio/default/Read</td>\n",
       "      <td>{'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...</td>\n",
       "      <td>2020-05-14T10:07:00.9820100+00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>AsAt=2020-05-14T10:04:48.0745930+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td>2020-05-14T10:07:00.9803165+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-05-14T10:07:01.118+00:00</td>\n",
       "      <td>lusid</td>\n",
       "      <td>metrics-api-entitlements-evaluation-active+3+7...</td>\n",
       "      <td>0HLVNE9F2VB0B:00000001</td>\n",
       "      <td>9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...</td>\n",
       "      <td>00u4edwdnnCS5aFsN2p7</td>\n",
       "      <td>Unspecified</td>\n",
       "      <td>4.6830</td>\n",
       "      <td>Success</td>\n",
       "      <td>LUSID_SYSTEM/lusid-administrator</td>\n",
       "      <td>...</td>\n",
       "      <td>Portfolio/default/Read</td>\n",
       "      <td>{'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...</td>\n",
       "      <td>2000-01-01T00:00:00.0000000+00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>AsAt=2020-05-14T10:04:48.0745930+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td>2020-05-14T10:07:01.0265900+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-05-14T10:07:01.142+00:00</td>\n",
       "      <td>lusid</td>\n",
       "      <td>metrics-api-entitlements-evaluation-active+4+7...</td>\n",
       "      <td>0HLVNE9E773T0:00000001</td>\n",
       "      <td>9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...</td>\n",
       "      <td>00u4edwdnnCS5aFsN2p7</td>\n",
       "      <td>Unspecified</td>\n",
       "      <td>3.1666</td>\n",
       "      <td>Success</td>\n",
       "      <td>LUSID_SYSTEM/lusid-administrator</td>\n",
       "      <td>...</td>\n",
       "      <td>Portfolio/default/Read</td>\n",
       "      <td>{'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...</td>\n",
       "      <td>2000-01-01T00:00:00.0000000+00:00</td>\n",
       "      <td>None</td>\n",
       "      <td>AsAt=2020-05-14T10:04:48.0745930+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td>2020-05-14T10:07:01.0556130+00:00</td>\n",
       "      <td>AsAt=Latest</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       timestamp application  \\\n",
       "0  2020-05-14T10:07:00.908+00:00       lusid   \n",
       "1  2020-05-14T10:07:00.945+00:00       lusid   \n",
       "2  2020-05-14T10:07:00.993+00:00       lusid   \n",
       "3  2020-05-14T10:07:01.118+00:00       lusid   \n",
       "4  2020-05-14T10:07:01.142+00:00       lusid   \n",
       "\n",
       "                                                  id               requestId  \\\n",
       "0  metrics-api-entitlements-evaluation-active+5+7...  0HLVNE9E773SU:00000001   \n",
       "1  metrics-api-entitlements-evaluation-active+5+7...  0HLVNE9IQKOVH:00000001   \n",
       "2  metrics-api-entitlements-evaluation-active+4+7...  0HLVNE9E773SV:00000001   \n",
       "3  metrics-api-entitlements-evaluation-active+3+7...  0HLVNE9F2VB0B:00000001   \n",
       "4  metrics-api-entitlements-evaluation-active+4+7...  0HLVNE9E773T0:00000001   \n",
       "\n",
       "                                           sessionId                  user  \\\n",
       "0  9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...  00u4edwdnnCS5aFsN2p7   \n",
       "1  9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...  00u4edwdnnCS5aFsN2p7   \n",
       "2  9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...  00u4edwdnnCS5aFsN2p7   \n",
       "3  9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...  00u4edwdnnCS5aFsN2p7   \n",
       "4  9514c820c8e5bf7bf8ac5ed7fa4c46905060e9110c3905...  00u4edwdnnCS5aFsN2p7   \n",
       "\n",
       "      userType  duration   result               authoritativeRoleId  ...  \\\n",
       "0  Unspecified    2.9817  Success  LUSID_SYSTEM/lusid-administrator  ...   \n",
       "1  Unspecified    6.1254  Success  LUSID_SYSTEM/lusid-administrator  ...   \n",
       "2  Unspecified    2.7767  Success  LUSID_SYSTEM/lusid-administrator  ...   \n",
       "3  Unspecified    4.6830  Success  LUSID_SYSTEM/lusid-administrator  ...   \n",
       "4  Unspecified    3.1666  Success  LUSID_SYSTEM/lusid-administrator  ...   \n",
       "\n",
       "                   action                                           resource  \\\n",
       "0  Portfolio/default/Read  {'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...   \n",
       "1  Portfolio/default/Read  {'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...   \n",
       "2  Portfolio/default/Read  {'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...   \n",
       "3  Portfolio/default/Read  {'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...   \n",
       "4  Portfolio/default/Read  {'scope': 'AuditTrail-3877-f893-882e-bc', 'cod...   \n",
       "\n",
       "           resourceFromEffectiveDate resourceToEffectiveDate  \\\n",
       "0  2020-05-14T10:07:00.8963470+00:00                    None   \n",
       "1  2020-05-14T10:07:00.9310360+00:00                    None   \n",
       "2  2020-05-14T10:07:00.9820100+00:00                    None   \n",
       "3  2000-01-01T00:00:00.0000000+00:00                    None   \n",
       "4  2000-01-01T00:00:00.0000000+00:00                    None   \n",
       "\n",
       "                         resourceFromAsAt resourceToAsAt  \\\n",
       "0  AsAt=2020-05-14T10:04:48.0745930+00:00    AsAt=Latest   \n",
       "1  AsAt=2020-05-14T10:04:48.0745930+00:00    AsAt=Latest   \n",
       "2  AsAt=2020-05-14T10:04:48.0745930+00:00    AsAt=Latest   \n",
       "3  AsAt=2020-05-14T10:04:48.0745930+00:00    AsAt=Latest   \n",
       "4  AsAt=2020-05-14T10:04:48.0745930+00:00    AsAt=Latest   \n",
       "\n",
       "                 accessExecutionTime accessAsAtTime requiredLicencePolicyId  \\\n",
       "0  2020-05-14T10:07:00.8940668+00:00    AsAt=Latest                           \n",
       "1  2020-05-14T10:07:00.9242489+00:00    AsAt=Latest                           \n",
       "2  2020-05-14T10:07:00.9803165+00:00    AsAt=Latest                           \n",
       "3  2020-05-14T10:07:01.0265900+00:00    AsAt=Latest                           \n",
       "4  2020-05-14T10:07:01.0556130+00:00    AsAt=Latest                           \n",
       "\n",
       "  links  \n",
       "0  None  \n",
       "1  None  \n",
       "2  None  \n",
       "3  None  \n",
       "4  None  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set the base URL\n",
    "client = api_factory.api_client.configuration.host.split(\"/\")[2]\n",
    "insights_base_url = f\"https://{client}/insights/api/\"\n",
    "\n",
    "# Build the URL for the access logs\n",
    "access_logs_url = insights_base_url + \"access\"\n",
    "\n",
    "# Create authorization headers using the FINBOURNE hosted Jupyter Notebook compatible Refreshing Token\n",
    "auth_headers = {\"Authorization\": f\"Bearer {api_factory.api_client.configuration.access_token}\"}\n",
    "\n",
    "# Make a request to retrieve the access logs, filtering down to the area of interest\n",
    "access_logs = requests.get(\n",
    "    access_logs_url, \n",
    "    headers=auth_headers, \n",
    "    params={\n",
    "        \"limit\": \"10000\", \n",
    "        \"filter\": f\"\"\"\n",
    "            application eq 'LUSID' and\n",
    "            resource[scope] eq '{scope}' and\n",
    "            resourceType eq 'Portfolio' and \n",
    "            action eq 'Portfolio/default/Read' and \n",
    "            result eq 'Success' and \n",
    "            resourceFromEffectiveDate lte {cut_off} and \n",
    "            resourceToAsAt eq 'AsAt=Latest' and\n",
    "            accessExecutionTime lte {cut_off}\"\"\"\n",
    "    }\n",
    ")\n",
    "\n",
    "if access_logs.status_code != 200:\n",
    "    raise ValueError(f\"Status code is {access_logs.status_code} instead of 200 for request to {access_logs_url}\")\n",
    "\n",
    "access_logs_values = json.loads(access_logs.text)[\"values\"]\n",
    "\n",
    "if len(access_logs_values) == 0: \n",
    "    raise ValueError(f\"No access logs were received from {access_logs_url}\")\n",
    "    \n",
    "print (f\"Retreived {len(access_logs_values)} access logs\", \"\\n\")\n",
    "print (\"Here are some examples of the access logs\", \"\\n\")\n",
    "pd.DataFrame(access_logs_values).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This has returned the logs for reading all Portfolios in the subsection of the q0 quadrant mentioned above. \n",
    "\n",
    "With most of the filtering done server side you can now filter the logs down even further to only those that involve reading from a Portfolio which you identified earlier contained a backdated correction. This can't be applied in the API call as the list of relevant Portfolios is too long for the completed filter to be valid.\n",
    "\n",
    "*Run the cell below to filter out Portfolios that have not had a backdated correction*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Users and associated Portfolios affected by backdated corrections after the cut-off of 2020-05-14T10:07:03Z and may need to re-run reports for \n",
      "\n",
      "User: 00u4edwdnnCS5aFsN2p7 - 2 Portfolios have had backdated corrections \n",
      "\n",
      "Portfolios Changed: ['EQUITY_GLOBAL', 'EQUITY_GLOBAL_ENERGY'] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "def filter_logs(log, codes):\n",
    "    \n",
    "    if log[\"resource\"][\"code\"] not in codes:\n",
    "        return False\n",
    "    \n",
    "    return True\n",
    "    \n",
    "\n",
    "users = {}\n",
    "\n",
    "# Get all Portfolios which each user needs to be notified about\n",
    "[users.setdefault(log[\"user\"], []).append(log[\"resource\"][\"code\"]) for log in access_logs_values if \n",
    "             filter_logs(log, [correction.entity_id.code for correction in corrections])]\n",
    "\n",
    "# Remove duplicates from the list of Portfolios for each user\n",
    "users = {key: list(set(value)) for key, value in users.items()}\n",
    "\n",
    "print (f\"Users and associated Portfolios affected by backdated corrections after the cut-off of {cut_off} and may need to re-run reports for\", \"\\n\") \n",
    "for user, portfolios_changed in users.items():\n",
    "    print(f\"User: {user} - {len(portfolios_changed)} Portfolios have had backdated corrections\", \"\\n\")\n",
    "    print(f\"Portfolios Changed: {portfolios_changed}\", \"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can then notify these users of the Portfolios which have experienced a backdated correction so that they can determine the impact of these corrections and whether or not the report needs to be re-issued."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4)  For a given affected User and affected Portfolio retrieve the details of all corrections so they can decide on what action to take"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a couple of ways for a user to understand the impacts of the backdated corrections. The most comprehensive is to use [Build Transactions](https://www.lusid.com/docs/api/#operation/BuildTransactions) from the [Transaction Portfolios API](https://www.lusid.com/docs/api/#tag/Transaction-Portfolios).\n",
    "\n",
    "You can see the details for all backdated events for a Portfolio using this API call.\n",
    "\n",
    "*Run the cell below to look at the details of the backdated corrections for one of the Portfolios*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Holdings in instruments {'LUID_5L1WA99T', 'LUID_0UWW5B6S'} affected \n",
      "\n",
      "Transaction types of {'Buy': 1, 'Sell': 2} \n",
      "\n",
      "Here are the backdated changes \n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transaction_id</th>\n",
       "      <th>type</th>\n",
       "      <th>description</th>\n",
       "      <th>instrument_identifiers.Instrument/default/ClientInternal</th>\n",
       "      <th>instrument_uid</th>\n",
       "      <th>transaction_date</th>\n",
       "      <th>settlement_date</th>\n",
       "      <th>units</th>\n",
       "      <th>transaction_amount</th>\n",
       "      <th>transaction_price.price</th>\n",
       "      <th>...</th>\n",
       "      <th>total_consideration.currency</th>\n",
       "      <th>exchange_rate</th>\n",
       "      <th>transaction_to_portfolio_rate</th>\n",
       "      <th>transaction_currency</th>\n",
       "      <th>SourcePortfolioId(default-Properties)</th>\n",
       "      <th>SourcePortfolioScope(default-Properties)</th>\n",
       "      <th>ResultantHolding(default-Properties)</th>\n",
       "      <th>transaction_status</th>\n",
       "      <th>entry_date_time</th>\n",
       "      <th>realised_gain_loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trd_0001a</td>\n",
       "      <td>Buy</td>\n",
       "      <td>Purchase</td>\n",
       "      <td>EQ_1234</td>\n",
       "      <td>LUID_5L1WA99T</td>\n",
       "      <td>2020-05-12 10:07:00.657383+00:00</td>\n",
       "      <td>2020-05-14 10:07:00.657383+00:00</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>GBP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2de898e9-8c2c-4edf-8338-778906e5f8de</td>\n",
       "      <td>AuditTrail-3877-f893-882e-bc</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>2020-05-14 10:07:08.466911+00:00</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>trd_0001b</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sale</td>\n",
       "      <td>EQ_1236</td>\n",
       "      <td>LUID_0UWW5B6S</td>\n",
       "      <td>2020-05-13 10:07:00.657383+00:00</td>\n",
       "      <td>2020-05-15 10:07:00.657383+00:00</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>GBP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2de898e9-8c2c-4edf-8338-778906e5f8de</td>\n",
       "      <td>AuditTrail-3877-f893-882e-bc</td>\n",
       "      <td>-4000000.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>2020-05-14 10:07:14.561554+00:00</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>trd_0001d</td>\n",
       "      <td>Sell</td>\n",
       "      <td>Sale</td>\n",
       "      <td>EQ_1234</td>\n",
       "      <td>LUID_5L1WA99T</td>\n",
       "      <td>2020-05-13 02:07:00.657383+00:00</td>\n",
       "      <td>2020-05-15 02:07:00.657383+00:00</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>GBP</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2de898e9-8c2c-4edf-8338-778906e5f8de</td>\n",
       "      <td>AuditTrail-3877-f893-882e-bc</td>\n",
       "      <td>1900000.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>2020-05-14 10:07:20.628884+00:00</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  transaction_id  type description  \\\n",
       "0      trd_0001a   Buy    Purchase   \n",
       "1      trd_0001b  Sell        Sale   \n",
       "2      trd_0001d  Sell        Sale   \n",
       "\n",
       "  instrument_identifiers.Instrument/default/ClientInternal instrument_uid  \\\n",
       "0                                            EQ_1234        LUID_5L1WA99T   \n",
       "1                                            EQ_1236        LUID_0UWW5B6S   \n",
       "2                                            EQ_1234        LUID_5L1WA99T   \n",
       "\n",
       "                  transaction_date                  settlement_date  \\\n",
       "0 2020-05-12 10:07:00.657383+00:00 2020-05-14 10:07:00.657383+00:00   \n",
       "1 2020-05-13 10:07:00.657383+00:00 2020-05-15 10:07:00.657383+00:00   \n",
       "2 2020-05-13 02:07:00.657383+00:00 2020-05-15 02:07:00.657383+00:00   \n",
       "\n",
       "       units  transaction_amount  transaction_price.price  ...  \\\n",
       "0  1000000.0           1000000.0                      1.0  ...   \n",
       "1  5000000.0           5000000.0                      1.0  ...   \n",
       "2   100000.0            100000.0                      1.0  ...   \n",
       "\n",
       "  total_consideration.currency  exchange_rate transaction_to_portfolio_rate  \\\n",
       "0                          GBP            1.0                           0.0   \n",
       "1                          GBP            1.0                           0.0   \n",
       "2                          GBP            1.0                           0.0   \n",
       "\n",
       "   transaction_currency  SourcePortfolioId(default-Properties)  \\\n",
       "0                   GBP   2de898e9-8c2c-4edf-8338-778906e5f8de   \n",
       "1                   GBP   2de898e9-8c2c-4edf-8338-778906e5f8de   \n",
       "2                   GBP   2de898e9-8c2c-4edf-8338-778906e5f8de   \n",
       "\n",
       "  SourcePortfolioScope(default-Properties)  \\\n",
       "0             AuditTrail-3877-f893-882e-bc   \n",
       "1             AuditTrail-3877-f893-882e-bc   \n",
       "2             AuditTrail-3877-f893-882e-bc   \n",
       "\n",
       "  ResultantHolding(default-Properties) transaction_status  \\\n",
       "0                            2000000.0             Active   \n",
       "1                           -4000000.0             Active   \n",
       "2                            1900000.0             Active   \n",
       "\n",
       "                   entry_date_time realised_gain_loss  \n",
       "0 2020-05-14 10:07:08.466911+00:00                 []  \n",
       "1 2020-05-14 10:07:14.561554+00:00                 []  \n",
       "2 2020-05-14 10:07:20.628884+00:00                 []  \n",
       "\n",
       "[3 rows x 22 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_backdated_change(scope, code, cut_off, upper_bound_as_at, api_factory):\n",
    "    \"\"\"\n",
    "    This function gets all the backdated corrections for a Portfolio with respect to a provided cut_off\n",
    "    \n",
    "    scope str: The scope of the Portfolio\n",
    "    code str: The code of the Portfolio\n",
    "    cut_off datetime: The cut_off to look for backdated corrections relative to\n",
    "    upper_bound_as_at datetime: The upper bound asAt datetime to look for backdated corrections\n",
    "    api_factory lusid.utilities.ApiClientFactory: The Api Factory to use \n",
    "    \"\"\"\n",
    "    \n",
    "    # Build a transaction portfolios API\n",
    "    transaction_portfolios_api = lusid.api.TransactionPortfoliosApi(\n",
    "        api_factory.build(lusid.api.TransactionPortfoliosApi))\n",
    "    \n",
    "    # Get the details for the backdated corrections using the build transactions API and filtering\n",
    "    backdated_corrections = transaction_portfolios_api.build_transactions(\n",
    "        scope=scope,\n",
    "        code=code,\n",
    "        as_at=upper_bound_as_at,\n",
    "        transaction_query_parameters=lusid.models.TransactionQueryParameters(\n",
    "            # This is an arbitary lower bound to include all backdated changes\n",
    "            start_date=datetime(1984, 1, 1, tzinfo=pytz.UTC),\n",
    "            end_date=cut_off,\n",
    "            show_cancelled_transactions=True\n",
    "        ),\n",
    "        # This filter ensures that only backdated corrections are returned with respect to the cut_off\n",
    "        filter=f\"entryDateTime gte {cut_off} and entryDateTime lte {upper_bound_as_at}\"\n",
    "    )\n",
    "    \n",
    "    return backdated_corrections\n",
    "\n",
    "# Use the function above to get the backdated corrections for one of the Portfolios \n",
    "backdated_corrections = get_backdated_change(\n",
    "    scope=scope, \n",
    "    # Arbitary choice of Portfolio\n",
    "    code=list(users.values())[0][0], \n",
    "    cut_off=cut_off, \n",
    "    upper_bound_as_at=datetime.now(pytz.UTC).strftime(\"%Y-%m-%dT%H:%M:%S\")+\"Z\", \n",
    "    api_factory=api_factory\n",
    ").values\n",
    "\n",
    "# Get some high level idea of the affected positions and types of transactions (incl setting positions)\n",
    "affected_holdings = set([backdated_correction.instrument_uid for backdated_correction in backdated_corrections])\n",
    "transaction_types = [backdated_correction.type for backdated_correction in backdated_corrections]\n",
    "type_count = {trans_type: transaction_types.count(trans_type) for trans_type in set(transaction_types)}\n",
    "\n",
    "print (f\"Holdings in instruments {affected_holdings} affected\", \"\\n\")\n",
    "print (f\"Transaction types of {type_count}\", \"\\n\")\n",
    "\n",
    "print (\"Here are the backdated changes\", \"\\n\")\n",
    "lusid_response_to_data_frame(backdated_corrections, rename_properties=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can visualise these backdated corrections in the q3 quadrant of the 2 dimensional effectiveAt and asAt datetime space shown in the examples earlier.\n",
    "\n",
    "*Run the cell below to plot the events*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set the figure size\n",
    "plt.figure(figsize=(30,20))\n",
    "\n",
    "transaction_dates = [backdated_correction.transaction_date for backdated_correction in backdated_corrections]\n",
    "entry_dates = [backdated_correction.entry_date_time for backdated_correction in backdated_corrections]\n",
    "\n",
    "# Plot the asAt date (entry_date_time) against the effectiveAt date (transaction_date) to see the bi-temporal plot\n",
    "plt.plot_date(\n",
    "    x=transaction_dates,\n",
    "    y=entry_dates,\n",
    "    ms=25)\n",
    "\n",
    "cut_off_date = datetime.strptime(cut_off, \"%Y-%m-%dT%H:%M:%S%z\")\n",
    "\n",
    "# Add in a vertical and horizontal line for the origin \n",
    "plt.axvline(cut_off_date, color='r')\n",
    "plt.axhline(cut_off_date, color='r')\n",
    "\n",
    "# Set the min and max of each axis (modify these as appropriate to get the best looking chart)\n",
    "plt.ylim(cut_off_date-(datetime.now(pytz.UTC)-cut_off_date), datetime.now(pytz.UTC))\n",
    "plt.xlim(min(transaction_dates), cut_off_date+(cut_off_date - min(transaction_dates)))\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}